services:
  db:
    image: postgres:16
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=facetrack
      - POSTGRES_USER=facetrack
      - POSTGRES_PASSWORD=facetrackpassword
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U facetrack"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - ./media:/app/media
      - ./static:/app/static
      - backend_static:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DEBUG=True # Đặt thành True để dễ dàng debug các vấn đề
      - SECRET_KEY=django-insecure-replace-with-your-own-key
      - ALLOWED_HOSTS=localhost,127.0.0.1,ifobito.online,*.ifobito.online,demo.ifobito.online,backend,nginx
      - POSTGRES_DB=facetrack
      - POSTGRES_USER=facetrack
      - POSTGRES_PASSWORD=facetrackpassword
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - CSRF_TRUSTED_ORIGINS=https://demo.ifobito.online,https://ifobito.online,http://localhost,http://127.0.0.1,http://nginx
      - CORS_ALLOWED_ORIGINS=https://demo.ifobito.online,http://localhost:3000,http://frontend:3000,http://nginx
      - CORS_ALLOW_CREDENTIALS=True
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        - REACT_APP_API_URL=/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=/api
      - PUBLIC_URL=https://demo.ifobito.online
      - DANGEROUSLY_DISABLE_HOST_CHECK=true
    restart: unless-stopped
    networks:
      - app-network

  # Nginx proxy để phục vụ cả frontend và backend qua cùng một origin
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - backend_static:/usr/share/nginx/html/staticfiles
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - app-network

  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate run --token "{CLOUDFLARE_TUNNEL_TOKEN}"
    depends_on:
      - nginx
    restart: always
    networks:
      - app-network

volumes:
  postgres_data:
  backend_static:

networks:
  app-network:
    driver: bridge